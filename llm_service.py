import os
from dotenv import load_dotenv
from groq import Groq

# ✅ Ensure .env is loaded even if main.py didn’t run first
load_dotenv()

class LLMService:
    def __init__(self):
        api_key = os.getenv("GROQ_API_KEY")
        if not api_key:
            raise ValueError("❌ GROQ_API_KEY not found in .env")
        self.client = Groq(api_key=api_key)
        print("✅ Groq API client initialized")

    async def generate_answer(self, query: str, contexts: list) -> str:
        """Generate answer using Groq LLM"""
        context_text = "\n\n".join(contexts[:3])

        messages = [
            {"role": "system", "content": "You are a helpful AI assistant that answers based on provided context."},
            {"role": "user", "content": f"Context:\n{context_text}\n\nQuestion: {query}\nAnswer:"}
        ]

        try:
            response = self.client.chat.completions.create(
                model = "llama-3.3-70b-versatile",
                messages=messages,
                max_tokens=300,
                temperature=0.2,
            )
            answer = response.choices[0].message.content.strip()
            print("✅ Answer generated by Groq")
            return answer
        except Exception as e:
            print(f"❌ Groq API Error: {e}")
            return "Sorry, I encountered an error while generating the answer."
